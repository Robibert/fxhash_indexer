# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Dict, List

from pydantic import BaseModel, Extra


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    address: str
    nat: str


class Value(BaseModel):
    class Config:
        extra = Extra.forbid

    balance: str
    enabled: bool
    price: str
    royalties: str
    supply: str


class LedgerItem(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: Value


class LedgerGentk(BaseModel):
    class Config:
        extra = Extra.forbid

    issuer_id: str
    iteration: str
    owner: str


class TokenMetadata(BaseModel):
    class Config:
        extra = Extra.forbid

    token_id: str
    token_info: Dict[str, str]


class GentkMinterV1Storage(BaseModel):
    class Config:
        extra = Extra.forbid

    administrator: str
    all_gentk_tokens: str
    all_tokens: str
    fees: str
    gentk_void_metadata: str
    ledger: List[LedgerItem]
    ledger_gentk: Dict[str, LedgerGentk]
    metadata: Dict[str, str]
    min_price: str
    objkt_contract: str
    paused: bool
    token_metadata: Dict[str, TokenMetadata]
    treasury_address: str
